---
import { Clases, Team } from 'data.json'
---

<div class="relative w-full">
  <section
    class="team relative w-full h-svh bg-background-cards text-white flex flex-col justify-center items-center gap-10 overflow-hidden"
  >
    <div class="profile-images w-max flex justify-center items-center gap-6">
      {
        Clases.map(({ image, slug }, i) => (
          <a href={`/clases/${slug}`} class="group">
            <div class="img relative w-20 h-20 md:w-24 md:h-24 p-1 cursor-pointer will-change-[width,height] transition-all duration-300 ease-out rounded-xl border-4 border-primary/60 bg-white/10 shadow-lg shadow-black/30 group overflow-hidden">
              <img
                transition:name={`image-${slug}`}
                class="w-full h-full object-cover rounded-xl group-hover:scale-110 transition-transform duration-500"
                src={image}
                alt={'Clase ' + (i + 1)}
              />
            </div>
          </a>
        ))
      }
    </div>

    <div class="profile-names w-full h-80 overflow-hidden relative">
      <div class="name default text-white/80">
        <h4
          class="absolute w-full text-center uppercase text-[8rem] md:text-[14rem] font-extrabold -tracking-tighter text-primary select-none opacity-60 drop-shadow-lg"
        >
          Clases
        </h4>
      </div>
      {
        Clases.map(({ name }) => (
          <div class="name">
            <h4 class="absolute w-full text-center uppercase text-[8rem] md:text-[14rem] font-extrabold -tracking-tighter text-primary select-none opacity-90 drop-shadow-lg">
              {name}
            </h4>
          </div>
        ))
      }
    </div>
  </section>
</div>

<style>
  .profile-names {
    clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
  }
  .name h4 {
    transform: translateY(100%);
    transition: transform 0.7s cubic-bezier(0.77, 0, 0.18, 1);
    letter-spacing: -0.05em;
  }
  .name.default h4 {
    transform: translateY(-100%);
    opacity: 0.5;
  }
  .name h4 .letter {
    position: relative;
    transform: translateY(0%);
    will-change: transform;
    display: inline-block;
    transition: color 0.3s;
  }
  .img {
    box-shadow:
      0 4px 24px #0004,
      0 0 0 4px #eab30833;
    transition:
      box-shadow 0.3s,
      border 0.3s;
  }
  .img:hover {
    box-shadow:
      0 8px 32px #eab30866,
      0 0 0 6px #eab30899;
    border-color: #eab308;
  }

  @media (max-width: 900px) {
    section {
      flex-direction: column-reverse;
    }

    .profile-images {
      flex-wrap: wrap;
      max-width: 90%;
      justify-content: center;
    }

    .img {
      width: 60px;
      height: 60px;
      padding: 2.5px;
    }

    .name h4 {
      font-size: 4rem;
      letter-spacing: 0;
    }

    .profile-names {
      height: 4rem;
    }
  }
</style>

<script>
  import gsap from 'gsap'
  import { SplitText } from 'gsap/SplitText'

  gsap.registerPlugin(SplitText)

  document.addEventListener('DOMContentLoaded', () => {
    const profileImagesContainer = document.querySelector('.profile-images')
    const profileImages = document.querySelectorAll('.profile-images .img')
    const nameElements = document.querySelectorAll('.profile-names .name')
    const nameHeadings = document.querySelectorAll('.profile-names .name h4')

    nameHeadings.forEach((heading) => {
      const split = new SplitText(heading, { type: 'chars' })
      split.chars.forEach((char) => {
        char.classList.add('letter')
      })
    })

    const defaultLetters = nameElements[0].querySelectorAll('.letter')
    gsap.set(defaultLetters, { y: '100%' })

    if (window.innerWidth >= 900) {
      profileImages.forEach((img, index) => {
        const correspondingName = nameElements[index + 1]
        const letters = correspondingName.querySelectorAll('.letter')

        img.addEventListener('mouseenter', () => {
          gsap.to(img, {
            width: 140,
            height: 140,
            duration: 0.5,
            ease: 'power4.out',
          })

          gsap.to(letters, {
            y: '-100%',
            ease: 'power4.out',
            duration: 0.75,
            stagger: {
              each: 0.025,
              from: 'center',
            },
          })
        })

        img.addEventListener('mouseleave', () => {
          gsap.to(img, {
            width: 100,
            height: 100,
            duration: 0.5,
            ease: 'power4.out',
          })

          gsap.to(letters, {
            y: '0%',
            ease: 'power4.out',
            duration: 0.75,
            stagger: {
              each: 0.025,
              from: 'center',
            },
          })
        })
      })

      profileImagesContainer?.addEventListener('mouseenter', () => {
        gsap.to(defaultLetters, {
          y: '0%',
          ease: 'power4.out',
          duration: 0.75,
          stagger: {
            each: 0.025,
            from: 'center',
          },
        })
      })

      profileImagesContainer?.addEventListener('mouseleave', () => {
        gsap.to(defaultLetters, {
          y: '100%',
          ease: 'power4.out',
          duration: 0.75,
          stagger: {
            each: 0.025,
            from: 'center',
          },
        })
      })
    } else {
      // Animación para dispositivos pequeños: solo resalta la imagen y muestra el nombre
      profileImages.forEach((img, index) => {
        const correspondingName = nameElements[index + 1]
        const letters = correspondingName.querySelectorAll('.letter')

        img.addEventListener('touchstart', () => {
          gsap.to(img, {
            scale: 1.15,
            boxShadow: '0 8px 32px #eab30866, 0 0 0 6px #eab30899',
            borderColor: '#eab308',
            duration: 0.4,
            ease: 'power2.out',
          })
          gsap.to(letters, {
            y: '-100%',
            ease: 'power2.out',
            duration: 0.5,
            stagger: {
              each: 0.01,
              from: 'center',
            },
          })
        })
        img.addEventListener('touchend', () => {
          gsap.to(img, {
            scale: 1,
            boxShadow: '',
            borderColor: '',
            duration: 0.4,
            ease: 'power2.out',
          })
          gsap.to(letters, {
            y: '0%',
            ease: 'power2.out',
            duration: 0.5,
            stagger: {
              each: 0.01,
              from: 'center',
            },
          })
        })
      })
    }
  })
</script>
