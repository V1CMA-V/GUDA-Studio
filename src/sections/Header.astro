---
const LINKS = {
  nav: [
    {
      label: 'Inicio',
      href: '/',
      img: 'https://images.unsplash.com/photo-1483490109305-acf13776a5fa?q=80&w=2072&auto=format&fit=crop',
    },
    {
      label: 'Sobre Nosotros',
      href: '/sobre-nosotros',
      img: 'https://images.unsplash.com/photo-1506744038136-46273834b3fb?q=80&w=2072&auto=format&fit=crop',
    },
    {
      label: 'Clases',
      href: '/clases',
      img: 'https://images.unsplash.com/photo-1465101046530-73398c7f28ca?q=80&w=2072&auto=format&fit=crop',
    },
    {
      label: 'Merch',
      href: '/merch',
      img: 'https://images.unsplash.com/photo-1519125323398-675f0ddb6308?q=80&w=2072&auto=format&fit=crop',
    },
  ],
  socials: [
    { label: 'WhatsApp', href: 'https://wa.me/1234567890' },
    { label: 'Facebook', href: 'https://www.facebook.com/yourprofile' },
    { label: 'Instagram', href: 'https://www.instagram.com/yourprofile' },
  ],
}
---

<!-- // Aquí inicia tu componente HTML -->
<nav class="fixed w-full p-10 flex justify-between items-center z-60">
  <div class="logo">
    <a href="/" class="h1 text-primary font-semibold text-4xl"
      >Gudas <span class="cursive tracking-widest text-white">Studio</span></a
    >
  </div>
  <div
    class="menu-toggle text-white hover:text-primary transition-colors relative w-12 h-6 cursor-pointer"
  >
    <p id="menu-open">Menu</p>
    <p id="menu-close">Close</p>
  </div>
</nav>

<div class="menu-overlay fixed w-full h-svh bg-[#0f0f0f] z-50 text-secondary">
  <div
    class="menu-content relative w-full h-full flex justify-center items-center"
    tabindex="-1"
  >
    <div class="menu-items w-full p-10 flex gap-5">
      <div class="col-lg flex-3 flex justify-center items-center">
        <div
          class="menu-preview-img relative w-[45%] h-full overflow-hidden min-h-80 min-w-52 flex items-center justify-center rounded-2xl"
        >
          <img
            src="https://images.unsplash.com/photo-1748033766479-fa6b0f9f6b33?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.1.0"
            alt=""
            class="w-full h-full object-cover absolute top-0 left-0"
            loading="lazy"
          />
        </div>
      </div>
      <div class="col-sm flex-2 px-2.5 py-0 flex flex-col gap-10">
        <div class="menu-links flex flex-col gap-2">
          {
            LINKS.nav.map((link) => (
              <div class="link hover:text-white">
                <a href={link.href} data-img={link.img}>
                  {link.label}
                </a>
              </div>
            ))
          }
        </div>
        <div class="menu-socials flex flex-col gap-2">
          {
            LINKS.socials.map((social) => (
              <div class="social">
                <a href={social.href}>{social.label}</a>
              </div>
            ))
          }
        </div>
      </div>
    </div>
    <div class="menu-footer w-full p-10 flex gap-5 absolute bottom-0">
      <div class="col-lg flex-3"><a href="#">Horarios</a></div>
      <div class="col-sm flex-2 flex justify-between">
        <a href="#contact">Contacto</a>
        <a href="#">Eventos</a>
      </div>
    </div>
  </div>
</div>

<style>
  .menu-toggle p {
    position: absolute;
    transform-origin: top left;
    will-change: transform, opacity;
  }

  .menu-content {
    transform-origin: left bottom;
    will-change: transform, opacity;
  }

  .link,
  .social {
    padding-bottom: 5px;
    clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
  }

  .link a,
  .social a {
    display: inline-block;
    will-change: transform;
    transition: color 0.5s;
  }

  .link a {
    font-size: 3.5rem;
    letter-spacing: -0.02rem;
  }

  .social a {
    color: #8d8d8d;
  }

  .social a:hover {
    color: #fff;
  }

  .link a::after,
  .social a::after,
  .menu-footer a::after {
    position: absolute;
    content: '';
    top: 102.5%;
    left: 0;
    width: 100%;
    height: 2px;
    background: #fff;
    transform: scaleX(0);
    transform-origin: right;
    transition: transform 0.3s cubic-bezier(0.6, 0, 0.4, 1);
  }

  .link a:hover::after,
  .social a:hover::after,
  .menu-footer a:hover::after {
    transform: scaleX(1);
    transform-origin: left;
  }

  .menu-toggle p#menu-close {
    opacity: 0;
    transform: translateX(-5px) translateY(10px) rotate(5deg);
  }

  .link a,
  .social a {
    transform: translateY(120%);
    /* opacity: 0.25; */
  }

  .menu-content {
    transform: translateX(-100px) translateY(-100px) scale(1.5) rotate(-15deg);
    /* opacity: 0.25; */
  }

  .menu-overlay {
    clip-path: polygon(0% 0%, 100% 0%, 100% 0%, 0% 0%);
  }

  @media (max-width: 900px) {
    .hero h1 {
      width: 100%;
      font-size: 4rem;
      letter-spacing: 0;
    }

    .menu-items .col-lg {
      display: none;
    }

    .link a::after,
    .social a::after,
    .menu-footer a::after {
      display: none;
    }
  }
</style>

<script>
  import gsap from 'gsap'

  document.addEventListener('DOMContentLoaded', () => {
    const menuToggle = document.querySelector('.menu-toggle')
    const menuOverlay = document.querySelector('.menu-overlay')
    const menuContent = document.querySelector('.menu-content')
    const menuPreviewImg = document.querySelector('.menu-preview-img')
    const menuLinks = document.querySelectorAll('.link a')
    const menuOpen = document.getElementById('menu-open')
    const menuClose = document.getElementById('menu-close')

    let isOpen = false
    let isAnimating = false

    function handleOverlayClick(e) {
      if (isOpen && !isAnimating) closeMenu()
    }

    function handleKeyDown(e) {
      if (e.key === 'Escape' && isOpen && !isAnimating) closeMenu()
    }

    menuOverlay.addEventListener('click', handleOverlayClick)
    document.addEventListener('keydown', handleKeyDown)

    function setAria(isOpen) {
      menuToggle.setAttribute('aria-expanded', isOpen)
      menuContent.setAttribute('aria-hidden', !isOpen)
      menuOverlay.setAttribute('aria-hidden', !isOpen)
    }

    menuToggle.setAttribute('tabindex', '0')
    menuToggle.setAttribute('role', 'button')
    menuToggle.setAttribute('aria-label', 'Abrir menú de navegación')
    setAria(false)

    menuToggle.addEventListener('click', () => {
      if (!isOpen) openMenu()
      else closeMenu()
    })

    menuToggle.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault()
        if (!isOpen) openMenu()
        else closeMenu()
      }
    })

    function cleanupPreviewImages() {
      const previewImages = menuPreviewImg.querySelectorAll('img')
      while (previewImages.length > 1) {
        menuPreviewImg.removeChild(previewImages[0])
      }
    }

    function resetPreviewImage() {
      menuPreviewImg.innerHTML = ''
      const defaultImg = document.createElement('img')
      defaultImg.src =
        'https://images.unsplash.com/photo-1748033766479-fa6b0f9f6b33?q=80&w=1974&auto=format&fit=crop'
      defaultImg.className =
        'w-full h-full object-cover absolute top-0 left-0 min-w-[200px] min-h-[300px] max-w-full max-h-full rounded-2xl'
      menuPreviewImg.appendChild(defaultImg)
    }

    function animateMenuToggle(isOpening) {
      gsap.to(isOpening ? menuOpen : menuClose, {
        x: isOpening ? -5 : 5,
        y: isOpening ? -10 : 10,
        rotation: isOpening ? -5 : 5,
        opacity: 0,
        delay: 0.25,
        duration: 0.5,
        ease: 'power2.out',
      })
      gsap.to(isOpening ? menuClose : menuOpen, {
        x: 0,
        y: 0,
        rotation: 0,
        opacity: 1,
        delay: 0.5,
        duration: 0.5,
        ease: 'power2.out',
      })
    }

    function openMenu() {
      if (isAnimating || isOpen) return
      isAnimating = true
      setAria(true)
      animateMenuToggle(true)
      gsap.to(menuContent, {
        rotation: 0,
        x: 0,
        y: 0,
        scale: 1,
        opacity: 1,
        duration: 1.25,
        ease: 'power4.inOut',
        onStart: () => menuContent.focus(),
      })
      gsap.to(['.link a', '.social a'], {
        y: '0%',
        opacity: 1,
        duration: 1,
        delay: 0.75,
        stagger: 0.1,
        ease: 'power3.out',
      })
      gsap.to(menuOverlay, {
        clipPath: 'polygon(0% 0%, 100% 0%, 100% 175%, 0% 100%)',
        duration: 1.25,
        ease: 'power4.inOut',
        onComplete: () => {
          isOpen = true
          isAnimating = false
        },
      })
    }

    function closeMenu() {
      if (isAnimating || !isOpen) return
      isAnimating = true
      setAria(false)
      animateMenuToggle(false)
      gsap.to(menuContent, {
        rotation: -15,
        x: -100,
        y: -100,
        scale: 1.5,
        opacity: 0.25,
        duration: 1.25,
        ease: 'power4.inOut',
      })
      gsap.to(menuOverlay, {
        clipPath: 'polygon(0% 0%, 100% 0%, 100% 0%, 0% 0%)',
        duration: 1.25,
        ease: 'power4.inOut',
        onComplete: () => {
          isOpen = false
          isAnimating = false
          gsap.set(['.link a', '.social a'], { y: '120%' })
          resetPreviewImage()
          menuToggle.focus()
        },
      })
    }

    menuLinks.forEach((link) => {
      link.addEventListener('mouseover', () => {
        if (!isOpen || isAnimating) return
        const imgSrc = link.getAttribute('data-img')
        if (!imgSrc) return
        const previewImages = menuPreviewImg.querySelectorAll('img')
        const lastImg = previewImages[previewImages.length - 1]
        // Si ya está la imagen correcta, no hacer nada
        if (lastImg && lastImg.src.split('?')[0] === imgSrc.split('?')[0])
          return
        // Crear nueva imagen y animar entrada
        const newPreviewImg = document.createElement('img')
        newPreviewImg.src = imgSrc
        newPreviewImg.style.opacity = 0
        newPreviewImg.style.transform = 'scale(1.15) rotate(8deg)'
        newPreviewImg.className =
          'w-full h-full object-cover absolute top-0 left-0 min-w-[200px] min-h-[300px] max-w-full max-h-full rounded-2xl'
        menuPreviewImg.appendChild(newPreviewImg)
        // Animar salida de la anterior (si existe)
        if (lastImg) {
          gsap.to(lastImg, {
            opacity: 0,
            scale: 1.05,
            rotation: 4,
            duration: 0.4,
            ease: 'power2.in',
            onComplete: () => {
              if (lastImg !== newPreviewImg && lastImg.parentNode) {
                lastImg.parentNode.removeChild(lastImg)
              }
            },
          })
        }
        // Animar entrada de la nueva
        gsap.to(newPreviewImg, {
          opacity: 1,
          scale: 1,
          rotation: 0,
          duration: 0.6,
          ease: 'power2.out',
        })
      })

      link.addEventListener('click', (e) => {
        const href = link.getAttribute('href')
        const isExternal = href.startsWith('http') || href.startsWith('mailto:')
        if (isExternal) return

        e.preventDefault()

        if (isOpen && !isAnimating) {
          closeMenu()
          setTimeout(() => {
            window.location.href = href
          }, 1300)
        } else {
          window.location.href = href
        }
      })
    })

    resetPreviewImage()
    gsap.set(['.link a', '.social a'], { y: '120%' })
  })
</script>
